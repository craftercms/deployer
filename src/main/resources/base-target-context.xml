<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2007-2020 Crafter Software Corporation. All Rights Reserved.
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License version 3 as published by
  ~ the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <context:annotation-config/>
    <context:property-placeholder/>

    <!-- Target -->
    <bean id="target" class="org.craftercms.deployer.impl.TargetImpl"/>

    <!-- Lifecycle hooks -->

    <bean id="createIndexLifecycleHook" class="org.craftercms.deployer.impl.lifecycle.CreateIndexLifecycleHook">
        <property name="siteName" value="${target.siteName}"/>
        <property name="indexIdFormat" value="${target.search.indexIdFormat}"/>
        <property name="elasticsearchAdminService" ref="elasticsearchAdminService"/>
    </bean>

    <bean id="deleteIndexLifecycleHook" class="org.craftercms.deployer.impl.lifecycle.DeleteIndexLifecycleHook">
        <property name="siteName" value="${target.siteName}"/>
        <property name="indexIdFormat" value="${target.search.indexIdFormat}"/>
        <property name="elasticsearchAdminService" ref="elasticsearchAdminService"/>
    </bean>

    <bean id="createCloudFormationLifecycleHook"
          class="org.craftercms.deployer.impl.lifecycle.aws.CreateCloudFormationLifecycleHook">
        <property name="templatesResource" value="${deployer.main.targets.config.aws.cloudformation.location}"/>
        <property name="templatesOverrideResource" value="${deployer.main.targets.config.aws.cloudformation.overrideLocation}"/>
    </bean>

    <bean id="deleteCloudFormationLifecycleHook"
          class="org.craftercms.deployer.impl.lifecycle.aws.DeleteCloudFormationLifecycleHook"/>

    <bean id="waitTillCloudFormationStackUsableLifecycleHook"
          class="org.craftercms.deployer.impl.lifecycle.aws.WaitTillCloudFormationStackUsableLifecycleHook">
        <property name="targetConfig" ref="targetConfig"/>
    </bean>

    <bean id="clearS3BucketLifecycleHook"
          class="org.craftercms.deployer.impl.lifecycle.aws.ClearS3BucketLifecycleHook"/>

    <bean id="deleteLocalRepoFolderLifecycleHook"
          class="org.craftercms.deployer.impl.lifecycle.DeleteLocalRepoFolderLifecycleHook">
        <property name="localRepoFolder" value="${target.localRepoPath}"/>
    </bean>

    <!-- Deployment Processors -->

    <!--
        All processors should be prototypes, so that several instances of them can be used. They will be instanced when the
        pipeline is created
    -->
    <bean id="deploymentProcessor" class="org.craftercms.deployer.impl.processors.AbstractDeploymentProcessor" abstract="true"
          scope="prototype">
        <property name="env" value="${target.env}"/>
        <property name="siteName" value="${target.siteName}"/>
        <property name="targetId" value="${target.id}"/>
    </bean>

    <bean id="scriptProcessor" parent="deploymentProcessor" lazy-init="true"
          class="org.craftercms.deployer.impl.processors.ScriptProcessor">
        <constructor-arg name="scriptEngine" ref="scriptEngine"/>
        <constructor-arg name="sandboxInterceptor" ref="sandboxInterceptor"/>
    </bean>

    <bean id="scriptEngine" class="org.craftercms.deployer.utils.scripting.ScriptEngineFactory" lazy-init="true">
        <constructor-arg name="urls" value="${deployer.main.scripting.classpath}"/>
        <constructor-arg name="sandboxEnabled" value="${deployer.main.scripting.sandbox.enabled}"/>
    </bean>

    <bean id="sandboxInterceptor" lazy-init="true"
          class="org.craftercms.commons.spring.groovy.SandboxInterceptorFactory">
        <constructor-arg name="sandboxEnabled" value="${deployer.main.scripting.sandbox.enabled}"/>
        <constructor-arg name="blacklistEnabled" value="${deployer.main.scripting.sandbox.blacklist.enabled}"/>
        <constructor-arg name="blacklist" value="${deployer.main.scripting.sandbox.blacklist.path}"/>
    </bean>

    <bean id="gitPullProcessor" parent="deploymentProcessor"
          class="org.craftercms.deployer.impl.processors.git.GitPullProcessor" >
        <property name="localRepoFolder" value="${target.localRepoPath}"/>
    </bean>

    <bean id="gitPushProcessor" parent="deploymentProcessor"
          class="org.craftercms.deployer.impl.processors.git.GitPushProcessor">
        <property name="localRepoFolder" value="${target.localRepoPath}"/>
    </bean>

    <bean id="gitDiffProcessor" parent="deploymentProcessor"
          class="org.craftercms.deployer.impl.processors.git.GitDiffProcessor">
        <property name="localRepoFolder" value="${target.localRepoPath}"/>
        <property name="blobFileExtension" value="${deployer.main.targets.config.blob.file.extension}"/>
        <property name="processedCommitsStore" ref="processedCommitsStore"/>
    </bean>

    <bean id="gitUpdateCommitIdProcessor" parent="deploymentProcessor"
          class="org.craftercms.deployer.impl.processors.git.GitUpdateCommitIdProcessor">
        <constructor-arg name="processedCommitsStore" ref="processedCommitsStore"/>
    </bean>

    <bean id="abstractSearchIndexingProcessor" class="org.craftercms.deployer.impl.processors.AbstractSearchIndexingProcessor"
          parent="deploymentProcessor" abstract="true">
        <property name="cacheTemplate" ref="crafter.cacheTemplate"/>
        <property name="contextFactory" ref="contextFactory"/>
        <property name="contentStoreService" ref="crafter.contentStoreService"/>
        <property name="xmlFlatteningEnabled" value="${target.search.indexing.xml.flattening.enabled}"/>
        <property name="indexIdFormat" value="${target.search.indexIdFormat}"/>
    </bean>

    <bean id="httpMethodCallProcessor" class="org.craftercms.deployer.impl.processors.HttpMethodCallProcessor"
          parent="deploymentProcessor"/>

    <bean id="commandLineProcessor" class="org.craftercms.deployer.impl.processors.CommandLineProcessor" parent="deploymentProcessor"/>

    <bean id="fileOutputProcessor" class="org.craftercms.deployer.impl.processors.FileOutputProcessor" parent="deploymentProcessor">
        <property name="outputFolder" value="${deployer.main.deployments.output.folderPath}"/>
    </bean>

    <bean id="mailNotificationProcessor" class="org.craftercms.deployer.impl.processors.MailNotificationProcessor"
          parent="deploymentProcessor">
        <property name="emailFactory" ref="emailFactory"/>
        <property name="objectMapper" ref="objectMapper"/>
        <property name="defaultTemplateName" value="${target.notifications.mail.templates.default}"/>
        <property name="defaultFrom" value="${target.notifications.mail.from}"/>
        <property name="defaultSubject" value="${target.notifications.mail.subject}"/>
        <property name="defaultHtml" value="${target.notifications.mail.html}"/>
        <property name="defaultStatusCondition" value="${target.notifications.mail.status}"/>
        <property name="defaultDateTimePattern" value="${target.defaultDateTimePattern}"/>
    </bean>

    <!-- Configuration Profiles -->

	<bean id="configurationProvider" class="org.craftercms.deployer.utils.config.profiles.ConfigurationProviderImpl">
		<constructor-arg name="contextFactory" ref="contextFactory"/>
		<constructor-arg name="contentStoreService" ref="crafter.contentStoreService"/>
	</bean>

    <bean id="s3ProfileLoader" class="org.craftercms.deployer.utils.config.profiles.ConfigurationProfileLoaderImpl">
		<constructor-arg name="profilesModule" value="${target.config.profiles.aws.module}"/>
		<constructor-arg name="profilesUrl" value="${target.config.profiles.aws.path}"/>
        <constructor-arg name="profileMapper" ref="crafter.s3ProfileMapper"/>
		<constructor-arg name="configurationProvider" ref="configurationProvider"/>
    </bean>

    <bean id="boxProfileLoader" class="org.craftercms.deployer.utils.config.profiles.ConfigurationProfileLoaderImpl">
		<constructor-arg name="profilesModule" value="${target.config.profiles.box.module}"/>
		<constructor-arg name="profilesUrl" value="${target.config.profiles.box.path}"/>
        <constructor-arg name="profileMapper">
            <bean class="org.craftercms.commons.config.profiles.box.BoxProfileMapper">
                <constructor-arg name="configurationResolver" ref="crafter.configurationResolver"/>
            </bean>
        </constructor-arg>
		<constructor-arg name="configurationProvider" ref="configurationProvider"/>
    </bean>

    <bean id="webDavProfileLoader" class="org.craftercms.deployer.utils.config.profiles.ConfigurationProfileLoaderImpl">
		<constructor-arg name="profilesModule" value="${target.config.profiles.webdav.module}"/>
		<constructor-arg name="profilesUrl" value="${target.config.profiles.webdav.path}"/>
        <constructor-arg name="profileMapper">
            <bean class="org.craftercms.commons.config.profiles.webdav.WebDavProfileMapper">
                <constructor-arg name="configurationResolver" ref="crafter.configurationResolver"/>
            </bean>
        </constructor-arg>
		<constructor-arg name="configurationProvider" ref="configurationProvider"/>
    </bean>

    <!-- Core -->

    <bean id="contextFactory" class="org.craftercms.deployer.utils.core.SingletonContextFactory">
        <property name="targetId" value="${target.id}"/>
        <property name="localRepoUrl" value="file:${target.localRepoPath}"/>
        <property name="contentStoreService" ref="crafter.contentStoreService"/>
        <property name="xmlMergingEnabled" value="${target.search.indexing.xml.merging.enabled}"/>
        <property name="enableCache" value="${target.core.cache.enabled}"/>
        <property name="maxAllowedItemsInCache" value="${target.core.cache.maxItems}"/>
    </bean>

    <!-- Remote File Stores -->

    <bean id="profileAwareRemotePathParser"
          class="org.craftercms.commons.file.stores.impl.PathPartsBasedProfileAwareRemotePathParser"/>

    <bean id="urlRemotePathParser" class="org.craftercms.commons.file.stores.impl.FixedStoreTypeRemotePathParser">
        <property name="storeType" value="url"/>
    </bean>

    <bean id="s3FileStore" class="org.craftercms.commons.file.stores.impl.s3.S3FileStore">
        <property name="profileLoader" ref="s3ProfileLoader"/>
        <property name="clientFactory" ref="crafter.s3ClientFactory"/>
    </bean>

    <bean id="boxFileStore" class="org.craftercms.commons.file.stores.impl.box.BoxFileStore">
        <property name="profileLoader" ref="boxProfileLoader"/>
    </bean>

    <bean id="webDavFileStore" class="org.craftercms.commons.file.stores.impl.webdav.WebDavFileStore">
        <property name="profileLoader" ref="webDavProfileLoader"/>
    </bean>

    <bean id="urlBasedFileStore" class="org.craftercms.commons.file.stores.impl.UrlBasedFileStore"/>

    <bean id="remoteFileResolver" class="org.craftercms.commons.file.stores.impl.RemoteFileResolverImpl">
        <property name="pathParsers">
            <map>
                <!--
                HTTP/HTTPS URLs are only indexed if they contain the protocol (http:// or https://). Protocol
                relative URLs (like //mydoc.pdf) are not supported since the protocol is unknown to the back-end
                indexer.
                -->
                <entry key="^(http:|https:)//.+$" value-ref="urlRemotePathParser"/>
                <entry key="^/?remote-assets/([^/]+)/([^/]+)/(.+)$" value-ref="profileAwareRemotePathParser"/>
            </map>
        </property>
        <property name="stores">
            <map>
                <entry key="s3" value-ref="s3FileStore"/>
                <entry key="box" value-ref="boxFileStore"/>
                <entry key="url" value-ref="urlBasedFileStore"/>
                <entry key="webdav" value-ref="webDavFileStore"/>
            </map>
        </property>
    </bean>

    <!-- Search -->

    <bean id="includeDescriptorsProcessor"
          class="org.craftercms.core.processors.impl.PageAwareIncludeDescriptorsProcessor">
        <property name="includeElementXPathQuery" value="${target.search.indexing.xml.flattening.includeElementXPathQuery}"/>
        <property name="removeIncludeElement" value="${target.search.indexing.xml.flattening.removeIncludeTags}"/>
        <property name="disabledIncludeNodeXPathQuery" value="${target.search.indexing.xml.flattening.disabledIncludeNodeXPathQuery}"/>
        <property name="localeCodeXPathQuery" value="${target.search.indexing.xml.locale.xpath}"/>
        <property name="pagesPathPattern" value="${target.search.indexing.xml.flattening.pagesPathPattern}"/>
        <property name="includedItemsProcessor" ref="includeDescriptorsProcessor"/>
        <property name="contentStoreService" ref="crafter.contentStoreService"/>
    </bean>

    <bean id="inheritedDescriptorsItemProcessor" 
          class="org.craftercms.core.processors.impl.InheritedDescriptorsItemProcessor">
        <constructor-arg name="inheritsFromElementName" value="${target.search.indexing.xml.merging.inherits.field}"/>
        <constructor-arg name="mergeStrategyResolver" ref="crafter.mergeStrategyResolverChain"/>
    </bean>

    <bean id="disableAwareIncludeDescriptorsProcessor" class="org.craftercms.commons.spring.ConditionalFactoryBean">
        <property name="flag" value="${target.search.indexing.xml.flattening.enabled}"/>
        <property name="actualBean" ref="includeDescriptorsProcessor"/>
    </bean>

    <util:list id="itemProcessors">
        <ref bean="disableAwareIncludeDescriptorsProcessor"/>
        <ref bean="inheritedDescriptorsItemProcessor"/>
    </util:list>

    <bean id="abstractXmlFileBatchIndexer" abstract="true">
        <property name="includePathPatterns"
                  value="#{environment.getProperty('target.search.indexing.xml.includePatterns', T(java.util.List))}"/>
        <property name="itemProcessors" ref="itemProcessors"/>
    </bean>

    <bean id="abstractBinaryFileBatchIndexer" abstract="true">
        <property name="supportedMimeTypes"
                  value="#{environment.getProperty('target.search.indexing.binary.supportedMimeTypes', T(java.util.List))}"/>
        <property name="maxFileSize" value="${target.search.indexing.binary.maxFileSize}"/>
    </bean>

    <bean id="abstractBinaryFileWithMetadataBatchIndexer" abstract="true">
        <property name="supportedMimeTypes"
                  value="#{environment.getProperty('target.search.indexing.binary.supportedMimeTypes', T(java.util.List))}"/>
        <property name="metadataPathPatterns"
                  value="#{environment.getProperty('target.search.indexing.binary.metadataPathPatterns', T(java.util.List))}"/>
        <property name="remoteBinaryPathPatterns"
                  value="#{environment.getProperty('target.search.indexing.binary.remoteBinaryPathPatterns', T(java.util.List))}"/>
        <property name="childBinaryPathPatterns"
                  value="#{environment.getProperty('target.search.indexing.binary.childBinaryPathPatterns', T(java.util.List))}"/>
        <property name="referenceXPaths"
                  value="#{environment.getProperty('target.search.indexing.binary.referenceXPaths', T(java.util.List))}"/>
        <property name="remoteFileResolver" ref="remoteFileResolver"/>
        <property name="itemProcessors" ref="itemProcessors"/>
        <property name="maxFileSize" value="${target.search.indexing.binary.maxFileSize}"/>
    </bean>

    <!-- Mail -->

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${target.notifications.mail.server.host}"/>
        <property name="port" value="${target.notifications.mail.server.port}"/>
        <property name="protocol" value="${target.notifications.mail.protocol}"/>
        <property name="defaultEncoding" value="${target.notifications.mail.encoding}"/>
    </bean>

    <bean id="mailFreemarkerConfig" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="templateLoaderPaths"
                  value="${target.notifications.mail.templates.overrideLocation},${target.notifications.mail.templates.location}"/>
        <property name="defaultEncoding" value="${target.notifications.mail.encoding}"/>
    </bean>

    <bean id="emailFactory" class="org.craftercms.commons.mail.impl.EmailFactoryImpl">
        <property name="mailSender" ref="mailSender"/>
        <property name="freeMarkerConfig" ref="mailFreemarkerConfig"/>
        <property name="templateSuffix" value="${target.notifications.mail.templates.suffix}"/>
        <property name="templateEncoding" value="${target.notifications.mail.encoding}"/>
    </bean>

    <!-- AWS -->

    <bean id="s3ExecutorService" scope="prototype" destroy-method="shutdownNow"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="${aws.threads.size}"/>
        <property name="maxPoolSize" value="${aws.threads.max}"/>
    </bean>

    <bean id="s3SyncProcessor" class="org.craftercms.deployer.impl.processors.aws.S3SyncProcessor"
          parent="deploymentProcessor">
        <constructor-arg name="threadPoolTaskExecutor" ref="s3ExecutorService"/>
        <constructor-arg name="localRepoUrl" value="${target.localRepoPath}"/>
        <constructor-arg name="blobExtension" value="${deployer.main.targets.config.blob.file.extension}"/>
    </bean>

    <bean id="cloudfrontInvalidationProcessor" parent="deploymentProcessor"
          class="org.craftercms.deployer.impl.processors.aws.CloudFrontInvalidationProcessor"/>

    <bean id="findAndReplaceProcessor" class="org.craftercms.deployer.impl.processors.FindAndReplaceProcessor"
          parent="deploymentProcessor">
        <property name="localRepoUrl" value="${target.localRepoPath}"/>
    </bean>

    <bean id="fileBasedDeploymentEventProcessor"
          class="org.craftercms.deployer.impl.processors.FileBasedDeploymentEventProcessor"
          parent="deploymentProcessor">
        <constructor-arg name="store" ref="deploymentEventsStore"/>
    </bean>

    <bean id="s3DeploymentEventsProcessor" parent="deploymentProcessor"
          class="org.craftercms.deployer.impl.processors.aws.S3DeploymentEventsProcessor">
        <constructor-arg name="threadPoolTaskExecutor" ref="s3ExecutorService"/>
        <constructor-arg name="store" ref="deploymentEventsStore"/>
    </bean>

    <bean id="delayProcessor" parent="deploymentProcessor"
          class="org.craftercms.deployer.impl.processors.DelayProcessor"/>

    <!-- Locale -->
    <bean id="descriptorLocaleExtractor" class="org.craftercms.search.locale.impl.DescriptorLocaleExtractor">
        <constructor-arg name="contentStoreService" ref="crafter.contentStoreService"/>
        <constructor-arg name="localeXPath" value="${target.search.indexing.xml.locale.xpath}"/>
    </bean>

    <!-- Elasticsearch -->
    <bean id="elasticsearchConfig" class="org.craftercms.deployer.utils.elasticsearch.ElasticsearchConfig">
        <constructor-arg name="config" ref="targetConfig"/>
    </bean>

    <bean id="tika" class="org.apache.tika.Tika"/>

    <bean id="elasticsearchAdminService"
          class="org.craftercms.deployer.utils.elasticsearch.ElasticsearchAdminServiceFactory">
        <constructor-arg name="config" ref="elasticsearchConfig"/>
        <constructor-arg name="authoringMapping" value="${target.search.elasticsearch.mappings.authoring}"/>
        <constructor-arg name="previewMapping" value="${target.search.elasticsearch.mappings.preview}"/>
        <constructor-arg name="authoringNamePattern" value="${target.search.elasticsearch.authoring.pattern}"/>
    </bean>

    <bean id="tokenizedElementParser"
          class="org.craftercms.search.commons.service.impl.TokenizedElementParser"/>

    <bean id="itemListElementParser" class="org.craftercms.search.elasticsearch.impl.ItemListElementParser"/>

    <bean id="htmlStrippingConverter"
          class="org.craftercms.search.commons.service.impl.HtmlStrippingConverter"/>

    <bean id="dateTimeConverter" class="org.craftercms.search.commons.service.impl.DateTimeConverter">
        <property name="dateTimeFieldPattern" value="${target.search.indexing.field.type.dateTime.pattern}"/>
    </bean>

    <bean id="timeOnlyConverter" class="org.craftercms.search.commons.service.impl.DateTimeConverter">
        <property name="dateTimeFieldPattern" value="${target.search.indexing.field.type.timeOnly.pattern}"/>
    </bean>

    <bean id="fieldValueConverter" class="org.craftercms.search.commons.service.impl.CompositeSuffixBasedConverter">
        <property name="converterMappings">
            <map>
                <entry key="${target.search.indexing.field.type.html.suffix}"
                       value-ref="htmlStrippingConverter"/>
                <entry key="${target.search.indexing.field.type.dateTime.suffix}"
                       value-ref="dateTimeConverter"/>
                <entry key="${target.search.indexing.field.type.timeOnly.suffix}"
                       value-ref="timeOnlyConverter"/>
            </map>
        </property>
    </bean>

    <bean id="elementParser" class="org.craftercms.search.elasticsearch.impl.ElasticsearchElementParserImpl">
        <property name="fieldValueConverter" ref="fieldValueConverter"/>
    </bean>

    <bean id="elementParserService" class="org.craftercms.search.commons.service.impl.ElementParserServiceImpl">
        <property name="parsers">
            <list>
                <ref bean="itemListElementParser"/>
                <ref bean="tokenizedElementParser"/>
                <ref bean="elementParser"/>
            </list>
        </property>
    </bean>

    <bean id="elasticsearchDocumentBuilder"
          class="org.craftercms.search.elasticsearch.impl.ElasticsearchDocumentBuilder">
        <property name="idFieldName" value="${target.search.indexing.field.name.id}"/>
        <property name="rootIdFieldName" value="${target.search.indexing.field.name.rootId}"/>
        <property name="siteFieldName" value="${target.search.indexing.field.name.site}"/>
        <property name="localIdFieldName" value="${target.search.indexing.field.name.localId}"/>
        <property name="publishingDateFieldName" value="${target.search.indexing.field.name.publishedDate.name}"/>
        <property name="publishingDateAltFieldName" value="${target.search.indexing.field.name.publishedDate.alt}"/>
        <property name="fieldValueConverter" ref="fieldValueConverter"/>
        <property name="parserService" ref="elementParserService"/>
        <property name="copyFields">
            <map>
                <entry key=".+${target.search.indexing.field.type.html.suffix}"
                       value="${target.search.indexing.field.type.html.copy}"/>
            </map>
        </property>
    </bean>

    <bean id="tikaDocumentParser" class="org.craftercms.search.elasticsearch.impl.tika.TikaDocumentParser">
        <property name="charLimit" value="${target.search.tika.limit}"/>
        <property name="metadataExtractors">
            <list>
                <ref bean="coreTikaMetadataExtractor"/>
                <ref bean="imageTikaMetadataExtractor"/>
                <ref bean="videoTikaMetadataExtractor"/>
            </list>
        </property>
        <property name="tika" ref="tika"/>
    </bean>

    <bean id="elasticsearchService" class="org.craftercms.deployer.utils.elasticsearch.ElasticsearchServiceFactory">
        <constructor-arg name="config" ref="elasticsearchConfig"/>
        <constructor-arg name="documentBuilder" ref="elasticsearchDocumentBuilder"/>
        <constructor-arg name="documentParser" ref="tikaDocumentParser"/>
    </bean>

    <bean id="elasticsearchXmlFileBatchIndexer" parent="abstractXmlFileBatchIndexer"
          class="org.craftercms.search.elasticsearch.batch.ElasticsearchXmlFileBatchIndexer">
        <constructor-arg name="elasticsearchAdminService" ref="elasticsearchAdminService"/>
        <constructor-arg name="localeExtractor" ref="descriptorLocaleExtractor"/>
        <constructor-arg name="elasticsearchService" ref="elasticsearchService"/>
    </bean>

    <bean id="elasticsearchBinaryFileBatchIndexer" parent="abstractBinaryFileBatchIndexer"
          class="org.craftercms.search.elasticsearch.batch.ElasticsearchBinaryFileBatchIndexer">
        <property name="elasticsearchService" ref="elasticsearchService"/>
    </bean>

    <bean id="elasticsearchBinaryFileWithMetadataBatchIndexer" parent="abstractBinaryFileWithMetadataBatchIndexer"
          class="org.craftercms.search.elasticsearch.batch.ElasticsearchBinaryFileWithMetadataBatchIndexer">
        <property name="elasticsearchService" ref="elasticsearchService"/>
    </bean>

    <bean id="coreTikaMetadataExtractor" class="org.craftercms.search.elasticsearch.impl.tika.TikaMetadataExtractor">
        <property name="mapping">
            <map>
                <entry key="author" value="#{T(org.apache.tika.metadata.TikaCoreProperties).CREATOR}"/>
                <entry key="title" value="#{T(org.apache.tika.metadata.TikaCoreProperties).TITLE}"/>
                <entry key="keywords" value="#{T(org.apache.tika.metadata.TikaCoreProperties).KEYWORDS}"/>
                <entry key="description" value="#{T(org.apache.tika.metadata.TikaCoreProperties).DESCRIPTION}"/>
                <entry key="contentType" value="#{T(org.apache.tika.metadata.HttpHeaders).CONTENT_TYPE}"/>
                <entry key="contentLength" value="#{T(org.apache.tika.metadata.HttpHeaders).CONTENT_LENGTH}"/>
                <entry key="created" value="#{T(org.apache.tika.metadata.TikaCoreProperties).CREATED}"/>
                <entry key="modified" value="#{T(org.apache.tika.metadata.TikaCoreProperties).MODIFIED}"/>
            </map>
        </property>
    </bean>

    <bean id="imageTikaMetadataExtractor" class="org.craftercms.search.elasticsearch.impl.tika.TikaMetadataExtractor">
        <property name="supportedMimeTypes" value="image/*,video/*"/>
        <property name="mapping">
            <map>
                <entry key="height" value="#{T(org.apache.tika.metadata.TIFF).IMAGE_LENGTH}"/>
                <entry key="width" value="#{T(org.apache.tika.metadata.TIFF).IMAGE_WIDTH}"/>
            </map>
        </property>
    </bean>

    <bean id="videoTikaMetadataExtractor" class="org.craftercms.search.elasticsearch.impl.tika.TikaMetadataExtractor">
        <property name="supportedMimeTypes" value="video/*"/>
        <property name="mapping">
            <map>
                <entry key="duration" value="#{T(org.apache.tika.metadata.XMPDM).DURATION}"/>
                <entry key="frameRate" value="#{T(org.apache.tika.metadata.XMPDM).VIDEO_FRAME_RATE}"/>
            </map>
        </property>
    </bean>

    <bean id="elasticsearchIndexingProcessor" parent="abstractSearchIndexingProcessor"
          class="org.craftercms.deployer.impl.processors.elasticsearch.ElasticsearchIndexingProcessor">
        <constructor-arg name="elasticsearchService" ref="elasticsearchService"/>
        <constructor-arg name="elasticsearchAdminService" ref="elasticsearchAdminService"/>
        <property name="batchIndexers">
            <list>
                <ref bean="elasticsearchXmlFileBatchIndexer"/>
                <ref bean="elasticsearchBinaryFileBatchIndexer"/>
                <ref bean="elasticsearchBinaryFileWithMetadataBatchIndexer"/>
            </list>
        </property>
    </bean>

    <bean id="authoringElasticsearchXmlFileBatchIndexer" parent="abstractXmlFileBatchIndexer"
          class="org.craftercms.search.elasticsearch.batch.ElasticsearchXmlFileBatchIndexer">
        <constructor-arg name="elasticsearchAdminService" ref="elasticsearchAdminService"/>
        <constructor-arg name="elasticsearchService" ref="elasticsearchService"/>
        <property name="metadataExtractors" ref="authoringMetadataExtractors"/>
    </bean>

    <bean id="authoringElasticsearchBinaryFileWithMetadataBatchIndexer"
          parent="abstractBinaryFileWithMetadataBatchIndexer"
          class="org.craftercms.search.elasticsearch.batch.ElasticsearchBinaryFileWithMetadataBatchIndexer">
        <property name="elasticsearchService" ref="elasticsearchService"/>
        <property name="supportedMimeTypes"
                  value="#{environment.getProperty('target.search.indexing.binary.authoring.supportedMimeTypes', T(java.util.List))}"/>
        <property name="metadataPathPatterns"
                  value="#{environment.getProperty('target.search.indexing.binary.authoring.metadataPathPatterns', T(java.util.List))}"/>
        <property name="binaryPathPatterns"
                  value="#{environment.getProperty('target.search.indexing.binary.authoring.binaryPathPatterns', T(java.util.List))}"/>
        <property name="referenceXPaths"
                  value="#{environment.getProperty('target.search.indexing.binary.authoring.referenceXPaths', T(java.util.List))}"/>
        <property name="metadataExtractors" ref="authoringMetadataExtractors"/>
    </bean>

    <bean id="contentTypeMetadataExtractor" class="org.craftercms.search.metadata.impl.ContentTypeMetadataExtractor">
        <property name="fieldXpath" value="${target.search.indexing.binary.authoring.contentType.xpath}"/>
        <property name="includePatterns"
                  value="#{environment.getProperty('target.search.indexing.binary.authoring.metadataPathPatterns', T(java.util.List))}"/>
    </bean>

    <bean id="fileSizeMetadataExtractor" class="org.craftercms.search.metadata.impl.FileSizeMetadataExtractor">
        <property name="includePatterns"
                  value="#{environment.getProperty('target.search.indexing.binary.authoring.metadataPathPatterns', T(java.util.List))}"/>
    </bean>

    <bean id="internalNameMetadataExtractor" class="org.craftercms.search.metadata.impl.InternalNameMetadataExtractor">
        <property name="internalNameFieldXpath" value="${target.search.indexing.binary.authoring.internalName.xpath}"/>
        <property name="includePatterns"
                  value="#{environment.getProperty('target.search.indexing.binary.authoring.internalName.includePatterns', T(java.util.List))}"/>
    </bean>

    <bean id="authoringElasticsearchIndexingProcessor" parent="elasticsearchIndexingProcessor">
        <property name="batchIndexers">
            <list>
                <ref bean="authoringElasticsearchXmlFileBatchIndexer"/>
                <ref bean="authoringElasticsearchBinaryFileWithMetadataBatchIndexer"/>
            </list>
        </property>
    </bean>

    <util:list id="authoringMetadataExtractors">
        <ref bean="internalNameMetadataExtractor"/>
        <ref bean="fileSizeMetadataExtractor"/>
        <ref bean="contentTypeMetadataExtractor"/>
    </util:list>

</beans>